{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Pr\u00e9sentation du projet : Analyse des fiches de donn\u00e9es Datagrandest Ce projet s'inscrit dans une analyse exploratoire des jeux de donn\u00e9es disponible sur le site Datagrandest . Objectifs de l'analyse : - Cr\u00e9er un algorithme capable de v\u00e9rifier si il existe des doublons dans les jeux de donn\u00e9es pr\u00e9sent sur le site datagrandest . - Cr\u00e9er un algorithme capable de classer les jeux de donn\u00e9es par th\u00e8mes . Ce projet r\u00e9unie ces algorithme dans une application web flask . Installation R\u00e9cup\u00e9rer le projet sur Github. Cr\u00e9er un environnement virtuel python via conda ou venv . Installer les packages n\u00e9cessaires au projet via le requirements.txt avec la commande : pip install -r requirements.txt Lancement de l'application Web A la racine du projet ex\u00e9cut\u00e9 les commandes suivantes dans le terminal : export FLASK_APP = flask_app export FLASK_DEBUG = 1 flask run Sch\u00e9ma de l'application Web flowchart TD home[Homepage]-->similarity[Document Similarity]--> url[Enter URL CKAN for analyse similarity of document]-->|Function most_similar_url|cosine{{Cosine_analyser}} --> render([Render similarity document compare to other]) SQL[(SQL Database)] -->|Count number of documents|home home[Homepage]-->topic[Topics Modelling visualizer] --> rangeslicertopics[Range slicer choose number of topics]-->|Function load_lda_model|lda{{LDA Topics model}} --> render_topics([Render visualisation Topics]) api[(Call Api Datagrandest)]-->|Function Load dataset_similarity|rangeslicertopics home[Homepage]-->table[Table similarity]--> loadtable[/load table which compare similarity for all documents/] --> returntable([Render Table similarity]) table --> buttontable[Click Button on page for access algothrim parameter page]--> algosimilar[/Algorithm for get all cosine similar for each document/] --> slicesimilarity[Range slicer : Choose the value of cosine similarity] -->|Function most_similar_all|render_similarity([return CSV]) CSVselect[(CSV fiche_select.csv)] --> loadtable CSVsimilar[(CSV fiche_similar.csv)] --> loadtable render_similarity --> CSVselect render_similarity --> CSVsimilar style home fill:#3498db style table fill:#3498db style similarity fill:#3498db style topic fill:#3498db style SQL fill: #FF5733 style api fill: #FF5733 style CSVselect fill: #6D8B74 style CSVsimilar fill: #6D8B74 style url fill: #839AA8 style rangeslicertopics fill: #839AA8 style buttontable fill: #839AA8 style slicesimilarity fill: #839AA8 Analyse des Documents similaires Documents Similaires Permet de tester la similarit\u00e9s d'une fiche de donn\u00e9es par rappport aux autres en utilisant l'url d'une fiche datagrandest. Choix d'un URL sur CKAN Pour choisir une fiche et r\u00e9cuperer son URL correspondant, selectionner une fiche sur CKAN exemple URL de fiche de donn\u00e9e : https://grandestprod-backoffice.data4citizen.com/dataset/donnee-grand-est-terre-de-jeux-2024 Table Similarit\u00e9s Tableau permettant de comparer la similarit\u00e9 de toutes les fiches du site datagrandest. Le tableau regroupe pour chaques fiches : L'url de la fiche dont la similarit\u00e9 est test\u00e9e L'url de la fiche similaire La similarit\u00e9 cosinus entre les deux fiches Mettre \u00e0 jour les donn\u00e9es du tableau et choix de la similarit\u00e9 cosinus Les donn\u00e9es du tableau peuvent \u00eatre mis \u00e0 jour en cliquant sur le button Chargement de l'algorithme de similarit\u00e9 sur la page contenant la table de similarit\u00e9. Vous acc\u00e9derez a une interface vous permettant de choisir la similarit\u00e9 cosinus (valeur entre 0 et 1). Une fois chargement de l'algorithme termin\u00e9,les donn\u00e9es sont stock\u00e9s dans deux fichiers CSV fiche select.csv et fiche similar.csv ,les donn\u00e9es du tableau seront automatiquement mis \u00e0 jour. Interface Algorithme similarit\u00e9 Analyse des th\u00e8mes Pour visualiser \u00e0 quel th\u00e8mes correspond chaque fiche de donn\u00e9es sur le site datagrandest nous avons utilis\u00e9 l'algorithme LDA ( Voir documentation ) qui permet d'attribuer des sujets \u00e0 chacun des documents : Via l'interface vous pouvez s\u00e9lectionner le nombre de sujets \u00e0 attribuer (par d\u00e9faut 9) Une visualisation sous forme de graphique permettant de d\u00e9terminer les termes r\u00e9current de chaque fiche Interface visualisation des th\u00e8mes Choix du nombre de th\u00e8mes (optimisation des hyperparam\u00e8tres) Pour savoir quel nombre de th\u00e8mes correspond le mieux a nos donn\u00e9es il faut tester notre algorithme avec diff\u00e9rents hyperparam\u00e8tres est d\u00e9terminer le nombre de th\u00e8mes le plus efficient. Dans le fichier topic_modelling.ipynb vous pouvez tester les hyperparam\u00e8tres de l'algorithme (r\u00e9sultat obtenu dans le fichier lda_tuning_results_new.csv ), puis visualiser le nombre de th\u00e8me opimal pour vos donn\u00e9es. Graphique du choix des th\u00e8mes","title":"Documentation"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#presentation-du-projet-analyse-des-fiches-de-donnees-datagrandest","text":"Ce projet s'inscrit dans une analyse exploratoire des jeux de donn\u00e9es disponible sur le site Datagrandest . Objectifs de l'analyse : - Cr\u00e9er un algorithme capable de v\u00e9rifier si il existe des doublons dans les jeux de donn\u00e9es pr\u00e9sent sur le site datagrandest . - Cr\u00e9er un algorithme capable de classer les jeux de donn\u00e9es par th\u00e8mes . Ce projet r\u00e9unie ces algorithme dans une application web flask .","title":"Pr\u00e9sentation du projet  : Analyse des fiches de donn\u00e9es Datagrandest"},{"location":"#installation","text":"R\u00e9cup\u00e9rer le projet sur Github. Cr\u00e9er un environnement virtuel python via conda ou venv . Installer les packages n\u00e9cessaires au projet via le requirements.txt avec la commande : pip install -r requirements.txt","title":"Installation"},{"location":"#lancement-de-lapplication-web","text":"A la racine du projet ex\u00e9cut\u00e9 les commandes suivantes dans le terminal : export FLASK_APP = flask_app export FLASK_DEBUG = 1 flask run","title":"Lancement de l'application Web"},{"location":"#schema-de-lapplication-web","text":"flowchart TD home[Homepage]-->similarity[Document Similarity]--> url[Enter URL CKAN for analyse similarity of document]-->|Function most_similar_url|cosine{{Cosine_analyser}} --> render([Render similarity document compare to other]) SQL[(SQL Database)] -->|Count number of documents|home home[Homepage]-->topic[Topics Modelling visualizer] --> rangeslicertopics[Range slicer choose number of topics]-->|Function load_lda_model|lda{{LDA Topics model}} --> render_topics([Render visualisation Topics]) api[(Call Api Datagrandest)]-->|Function Load dataset_similarity|rangeslicertopics home[Homepage]-->table[Table similarity]--> loadtable[/load table which compare similarity for all documents/] --> returntable([Render Table similarity]) table --> buttontable[Click Button on page for access algothrim parameter page]--> algosimilar[/Algorithm for get all cosine similar for each document/] --> slicesimilarity[Range slicer : Choose the value of cosine similarity] -->|Function most_similar_all|render_similarity([return CSV]) CSVselect[(CSV fiche_select.csv)] --> loadtable CSVsimilar[(CSV fiche_similar.csv)] --> loadtable render_similarity --> CSVselect render_similarity --> CSVsimilar style home fill:#3498db style table fill:#3498db style similarity fill:#3498db style topic fill:#3498db style SQL fill: #FF5733 style api fill: #FF5733 style CSVselect fill: #6D8B74 style CSVsimilar fill: #6D8B74 style url fill: #839AA8 style rangeslicertopics fill: #839AA8 style buttontable fill: #839AA8 style slicesimilarity fill: #839AA8","title":"Sch\u00e9ma de l'application Web"},{"location":"#analyse-des-documents-similaires","text":"","title":"Analyse des Documents similaires"},{"location":"#documents-similaires","text":"Permet de tester la similarit\u00e9s d'une fiche de donn\u00e9es par rappport aux autres en utilisant l'url d'une fiche datagrandest. Choix d'un URL sur CKAN Pour choisir une fiche et r\u00e9cuperer son URL correspondant, selectionner une fiche sur CKAN exemple URL de fiche de donn\u00e9e : https://grandestprod-backoffice.data4citizen.com/dataset/donnee-grand-est-terre-de-jeux-2024","title":"Documents Similaires"},{"location":"#table-similarites","text":"Tableau permettant de comparer la similarit\u00e9 de toutes les fiches du site datagrandest. Le tableau regroupe pour chaques fiches : L'url de la fiche dont la similarit\u00e9 est test\u00e9e L'url de la fiche similaire La similarit\u00e9 cosinus entre les deux fiches","title":"Table Similarit\u00e9s"},{"location":"#mettre-a-jour-les-donnees-du-tableau-et-choix-de-la-similarite-cosinus","text":"Les donn\u00e9es du tableau peuvent \u00eatre mis \u00e0 jour en cliquant sur le button Chargement de l'algorithme de similarit\u00e9 sur la page contenant la table de similarit\u00e9. Vous acc\u00e9derez a une interface vous permettant de choisir la similarit\u00e9 cosinus (valeur entre 0 et 1). Une fois chargement de l'algorithme termin\u00e9,les donn\u00e9es sont stock\u00e9s dans deux fichiers CSV fiche select.csv et fiche similar.csv ,les donn\u00e9es du tableau seront automatiquement mis \u00e0 jour. Interface Algorithme similarit\u00e9","title":"Mettre \u00e0 jour les donn\u00e9es du tableau et choix de la similarit\u00e9 cosinus"},{"location":"#analyse-des-themes","text":"Pour visualiser \u00e0 quel th\u00e8mes correspond chaque fiche de donn\u00e9es sur le site datagrandest nous avons utilis\u00e9 l'algorithme LDA ( Voir documentation ) qui permet d'attribuer des sujets \u00e0 chacun des documents : Via l'interface vous pouvez s\u00e9lectionner le nombre de sujets \u00e0 attribuer (par d\u00e9faut 9) Une visualisation sous forme de graphique permettant de d\u00e9terminer les termes r\u00e9current de chaque fiche Interface visualisation des th\u00e8mes","title":"Analyse des th\u00e8mes"},{"location":"#choix-du-nombre-de-themes-optimisation-des-hyperparametres","text":"Pour savoir quel nombre de th\u00e8mes correspond le mieux a nos donn\u00e9es il faut tester notre algorithme avec diff\u00e9rents hyperparam\u00e8tres est d\u00e9terminer le nombre de th\u00e8mes le plus efficient. Dans le fichier topic_modelling.ipynb vous pouvez tester les hyperparam\u00e8tres de l'algorithme (r\u00e9sultat obtenu dans le fichier lda_tuning_results_new.csv ), puis visualiser le nombre de th\u00e8me opimal pour vos donn\u00e9es. Graphique du choix des th\u00e8mes","title":"Choix du nombre de th\u00e8mes (optimisation des hyperparam\u00e8tres)"},{"location":"a_propos/","text":"A propos Ce projet IA se compose d'une application web r\u00e9alis\u00e9 en Python via la librairie Flask . Librairies utilis\u00e9es pour le projet Ici seront list\u00e9 les principales libraries utilis\u00e9es pour ce projet ainsi que leurs documentations. Librairies Librairie Description Liens Documentation Flask Framework application web Flask Gensim Topics modelling (LDA Model) Gensim pyLDAvis Visualization topic model pyLDAvis Sentence-Transformers Similarity Documents Sentence-Transformers Pandas Manipulation et analyse des donn\u00e9es Pandas Librairies Librairie Description Liens Documentation Bootsrap Framework design web Bootsrap Datatables Tableau Interactif html Datatables Ion.RangeSlider Range slider JS RangeSlider","title":"A propos"},{"location":"a_propos/#a-propos","text":"Ce projet IA se compose d'une application web r\u00e9alis\u00e9 en Python via la librairie Flask .","title":"A propos"},{"location":"a_propos/#librairies-utilisees-pour-le-projet","text":"Ici seront list\u00e9 les principales libraries utilis\u00e9es pour ce projet ainsi que leurs documentations.","title":"Librairies utilis\u00e9es pour le projet"},{"location":"a_propos/#librairies","text":"Librairie Description Liens Documentation Flask Framework application web Flask Gensim Topics modelling (LDA Model) Gensim pyLDAvis Visualization topic model pyLDAvis Sentence-Transformers Similarity Documents Sentence-Transformers Pandas Manipulation et analyse des donn\u00e9es Pandas","title":"Librairies "},{"location":"a_propos/#librairies_1","text":"Librairie Description Liens Documentation Bootsrap Framework design web Bootsrap Datatables Tableau Interactif html Datatables Ion.RangeSlider Range slider JS RangeSlider","title":"Librairies "},{"location":"schema_web/","text":"Sch\u00e9ma de l'application web flowchart TD home[Homepage]-->similarity[Document Similarity]--> url[Enter URL CKAN for analyse similarity of document]-->|Function most_similar_url|cosine{{Cosine_analyser}} --> render([Render similarity document compare to other]) SQL[(SQL Database)] -->|Count number of documents|home home[Homepage]-->topic[Topics Modelling visualizer] --> rangeslicertopics[Range slicer choose number of topics]-->|Function load_lda_model|lda{{LDA Topics model}} --> render_topics([Render visualisation Topics]) api[(Call Api Datagrandest)]-->|Function Load dataset_similarity|rangeslicertopics home[Homepage]-->table[Table similarity]--> loadtable[/load table which compare similarity for all documents/] --> returntable([Render Table similarity]) table --> buttontable[Click Button on page for access algothrim parameter page]--> algosimilar[/Algorithm for get all cosine similar for each document/] --> slicesimilarity[Range slicer : Choose the value of cosine similarity] -->|Function most_similar_all|render_similarity([return CSV]) CSVselect[(CSV fiche_select.csv)] --> loadtable CSVsimilar[(CSV fiche_similar.csv)] --> loadtable render_similarity --> CSVselect render_similarity --> CSVsimilar style home fill:#3498db style table fill:#3498db style similarity fill:#3498db style topic fill:#3498db style SQL fill: #FF5733 style api fill: #FF5733 style CSVselect fill: #6D8B74 style CSVsimilar fill: #6D8B74 style url fill: #839AA8 style rangeslicertopics fill: #839AA8 style buttontable fill: #839AA8 style slicesimilarity fill: #839AA8","title":"Sch\u00e9ma de l'application web"},{"location":"schema_web/#schema-de-lapplication-web","text":"flowchart TD home[Homepage]-->similarity[Document Similarity]--> url[Enter URL CKAN for analyse similarity of document]-->|Function most_similar_url|cosine{{Cosine_analyser}} --> render([Render similarity document compare to other]) SQL[(SQL Database)] -->|Count number of documents|home home[Homepage]-->topic[Topics Modelling visualizer] --> rangeslicertopics[Range slicer choose number of topics]-->|Function load_lda_model|lda{{LDA Topics model}} --> render_topics([Render visualisation Topics]) api[(Call Api Datagrandest)]-->|Function Load dataset_similarity|rangeslicertopics home[Homepage]-->table[Table similarity]--> loadtable[/load table which compare similarity for all documents/] --> returntable([Render Table similarity]) table --> buttontable[Click Button on page for access algothrim parameter page]--> algosimilar[/Algorithm for get all cosine similar for each document/] --> slicesimilarity[Range slicer : Choose the value of cosine similarity] -->|Function most_similar_all|render_similarity([return CSV]) CSVselect[(CSV fiche_select.csv)] --> loadtable CSVsimilar[(CSV fiche_similar.csv)] --> loadtable render_similarity --> CSVselect render_similarity --> CSVsimilar style home fill:#3498db style table fill:#3498db style similarity fill:#3498db style topic fill:#3498db style SQL fill: #FF5733 style api fill: #FF5733 style CSVselect fill: #6D8B74 style CSVsimilar fill: #6D8B74 style url fill: #839AA8 style rangeslicertopics fill: #839AA8 style buttontable fill: #839AA8 style slicesimilarity fill: #839AA8","title":"Sch\u00e9ma de l'application web"}]}